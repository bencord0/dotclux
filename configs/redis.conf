# Redis config for 2.6.2

# run as daemon?
daemonize no

# daemonized pid location
pidfile /var/run/redis.pid

# listen port
port 6379

# Close the connection after a client is idle for N seconds (0 to disable)
timeout 0

# log levels: debug > verbose > notice > warning
loglevel notice

# Log to file name || 'stdout'. NB: as daemon, logs > /dev/null
logfile stdout

# number of databases, used to be 16, needed?
databases 1

################################ SNAPSHOTTING  #################################
# not strictly needed

# save after 900s if at least one key changed
#save 900 1
# save after 300s if at least 10 keys changed
#save 300 10
# save after 60s if at least 10000 keys changed
#save 60 10000

# what to do if bgsave fails => force errors
stop-writes-on-bgsave-error yes

# Compress string objects using LZF when dump .rdb databases?
rdbcompression yes

# corruption resistance
rdbchecksum yes

# The filename where to dump the DB
dbfilename dump.rdb

# The working directory. TODO: syntax for more generic?
dir /home/clux/local/redis/

################################# REPLICATION #################################
# single server mode, replication not used

################################## SECURITY ###################################
# authentication not used

################################### LIMITS ####################################
# low-ball initials, increase if errors
maxclients 10
maxmemory 10MB

# eviction algorithm on max memory hit
# NB: redis returns errors on all writes regardless of this choice
maxmemory-policy allkeys-lru
# maxmemory policy evicts worst out of:
maxmemory-samples 3

############################## APPEND ONLY MODE ###############################
# alternate persistence mode for better durability
# not a priority for us
appendonly no

# leave out all other appendonly options

################################## SLOW LOG ###################################

# log queries slower than given number in micro seconds, or negative disabled
slowlog-log-slower-than 10000

# set an upper limit on memory used by the slowlog
slowlog-max-len 128

############################### ADVANCED CONFIG ###############################

# Hashes are encoded using a memory efficient data structure when they have a
# small number of entries, and the biggest entry does not exceed a given
# threshold. These thresholds can be configured using the following directives.
hash-max-ziplist-entries 512
hash-max-ziplist-value 64

# Similarly to hashes, small lists are also encoded in a special way in order
# to save a lot of space. The special representation is only used when
# you are under the following limits:
list-max-ziplist-entries 512
list-max-ziplist-value 64

# Sets have a special encoding in just one case: when a set is composed
# of just strings that happens to be integers in radix 10 in the range
# of 64 bit signed integers.
# The following configuration setting sets the limit in the size of the
# set in order to use this special memory saving encoding.
set-max-intset-entries 512

# Similarly to hashes and lists, sorted sets are also specially encoded in
# order to save a lot of space. This encoding is only used when the length and
# elements of a sorted set are below the following limits:
zset-max-ziplist-entries 128
zset-max-ziplist-value 64

# Rehash main hash table in default way (at worst causes 2ms delays)
activerehashing yes

# client-output-buffer-limit <class> <hard limit> <soft limit> <soft seconds>
# disc. connection class if hard limit reached immediately
# disc. connection class if soft limit is sustained for soft seconds
client-output-buffer-limit normal 0 0 0
client-output-buffer-limit slave 256mb 64mb 60
client-output-buffer-limit pubsub 32mb 8mb 60

################################## INCLUDES ###################################
# no need for advanced configs at this time
